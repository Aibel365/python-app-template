[[tool.docker]]
enabled = false
use_latest = true
ref_name = "ImageApp"
image_name = "app-python" #FIX ME!
team_name = "python-team" #FIX ME!
docker_file = "Dockerfile"
context = "."

# INFO:
#
# For building docker image, set to false if not needed
#
# This expects to find these under github repo secrets
# secrets.CONTAINER_REGISTRY_ACR_URL 
# secrets.CONTAINER_REGISTRY_ACR_USERNAME
# secrets.CONTAINER_REGISTRY_ACR_PASSWORD


[[tool.gitops]]
enabled = false
name = "GitopsDeployment"
repo = "Aibel365/app-python-gitops" #FIX ME!
file = "cluster_test/test.yaml" #FIX ME!
kind = "Deployment"
docker_ref = "ImageApp"
image_path = '["spec"]["template"]["spec"]["containers"][0]["image"]' #FIX ME!

# INFO:
#
# Updating a gitops with new image version based on github action jobid
# USE ONLY ON TEST!!!
# You need to enable docker if you plan to use this one.
#
# This expects to find these under github repo secrets
# secrets.SSH_PRIVATE_KEY_GITOPS
# This key needs to be a deploy key with write privileges
#
# How to create sshkey
# ssh-keygen -t ed25519 -C "email@whater.com"


[tool.python]
enabled = true
# INFO
#
# tells action tools its a python project
# it will now lint using isort/black/ruff tools


[tool.semantic_release]
version_toml = ["pyproject.toml:project.version"]
# INFO
#
# This will generate a release  for your project if added
# generate_release_auto.yaml expects to find this under github repo secrets
# secrets.SSH_PRIVATE_KEY_SOURCE
# This key needs to be a deploy key with write privileges on this source repository where you plan to do release
# PS! do not enable Do not allow bypassing the above settings under branch protection, if you do we can not push
#
# How to create sshkey
# ssh-keygen -t ed25519 -C "email@whater.com"


assets = []
commit_message = "{version}\n\nAutomatically generated by python-semantic-release"
commit_parser = "angular"
logging_use_named_masks = false
major_on_zero = true
tag_format = "v{version}"

[tool.semantic_release.branches.main]
match = "(main|master)"
prerelease_token = "rc"
prerelease = false

[tool.semantic_release.changelog]
template_dir = "templates"
changelog_file = "CHANGELOG.md"
exclude_commit_patterns = []

[tool.semantic_release.changelog.environment]
block_start_string = "{%"
block_end_string = "%}"
variable_start_string = "{{"
variable_end_string = "}}"
comment_start_string = "{#"
comment_end_string = "#}"
trim_blocks = false
lstrip_blocks = false
newline_sequence = "\n"
keep_trailing_newline = false
extensions = []
autoescape = true

[tool.semantic_release.commit_author]
env = "GIT_COMMIT_AUTHOR"
default = "semantic-release <semantic-release>"

[tool.semantic_release.commit_parser_options]
allowed_tags = ["chore", "feat", "fix"]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]

[tool.semantic_release.remote]
name = "origin"
type = "github"
ignore_token_for_push = true

[tool.semantic_release.remote.token]
env = "GH_TOKEN"

[tool.semantic_release.publish]
upload_to_vcs_release = true
