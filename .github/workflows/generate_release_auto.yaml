name: Release

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      id-token: write # needed for semantic release, do not remove
      contents: write # needed for semantic release, do not remove
      pull-requests: read # needed for 8BitJonny/gh-get-current-pr

    steps:
      #####################################################################################################################

      - name: Pull pull request data
        uses: 8BitJonny/gh-get-current-pr@2.2.0
        id: PR

      #####################################################################################################################

      - name: Checkout git
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      #####################################################################################################################

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      #####################################################################################################################

      - name: Install python dependencies
        if: steps.PR.outputs.pr_found == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install python-semantic-release==8.1.1
          pip install toml==0.10.2

      #####################################################################################################################

      - name: Collect semantic release version number - AUTO (follows semver)
        if: |
          steps.PR.outputs.pr_found == 'true' 
          && contains( fromJSON(steps.PR.outputs.pr).labels.*.name, 'release-auto')
          && !contains( fromJSON(steps.PR.outputs.pr).labels.*.name, 'release-patch')
          && !contains( fromJSON(steps.PR.outputs.pr).labels.*.name, 'release-minor')
          && !contains( fromJSON(steps.PR.outputs.pr).labels.*.name, 'release-major')
        run: |
          echo "VERSION_ENV_CACHE=$(semantic-release --noop version)" >> $GITHUB_ENV
          echo "RELEASED_GENERATED=1" >> $GITHUB_ENV

      #####################################################################################################################

      - name: Collect semantic release version number -  force PATCH
        if: |
          steps.PR.outputs.pr_found == 'true'
          && !contains( fromJSON(steps.PR.outputs.pr).labels.*.name, 'release-auto')
          && contains( fromJSON(steps.PR.outputs.pr).labels.*.name, 'release-patch')
          && !contains( fromJSON(steps.PR.outputs.pr).labels.*.name, 'release-minor')
          && !contains( fromJSON(steps.PR.outputs.pr).labels.*.name, 'release-major')
        run: |
          echo "VERSION_ENV_CACHE=$(semantic-release --noop version --patch)" >> $GITHUB_ENV
          echo "RELEASED_GENERATED=1" >> $GITHUB_ENV

      #####################################################################################################################

      - name: Collect semantic release version number -  force MINOR
        if: |
          steps.PR.outputs.pr_found == 'true'
          && !contains( fromJSON(steps.PR.outputs.pr).labels.*.name, 'release-auto')
          && !contains( fromJSON(steps.PR.outputs.pr).labels.*.name, 'release-patch')
          && contains( fromJSON(steps.PR.outputs.pr).labels.*.name, 'release-minor')
          && !contains( fromJSON(steps.PR.outputs.pr).labels.*.name, 'release-major')
        run: |
          echo "VERSION_ENV_CACHE=$(semantic-release --noop version --minor)" >> $GITHUB_ENV
          echo "RELEASED_GENERATED=1" >> $GITHUB_ENV

      #####################################################################################################################

      - name: Collect semantic release version number -  force MAJOR
        if: |
          steps.PR.outputs.pr_found == 'true'
          && !contains( fromJSON(steps.PR.outputs.pr).labels.*.name, 'release-auto')
          && !contains( fromJSON(steps.PR.outputs.pr).labels.*.name, 'release-patch')
          && !contains( fromJSON(steps.PR.outputs.pr).labels.*.name, 'release-minor')
          && contains( fromJSON(steps.PR.outputs.pr).labels.*.name, 'release-major')
        run: |
          echo "VERSION_ENV_CACHE=$(semantic-release --noop version --major)" >> $GITHUB_ENV
          echo "RELEASED_GENERATED=1" >> $GITHUB_ENV

      #####################################################################################################################

      - name: Collect docker image team and name
        if: env.RELEASED_GENERATED == '1'
        shell: python
        run: |
          import toml
          import os

          data = toml.load("semantic-release.toml")

          def set_output(name, value):
            with open(os.environ['GITHUB_ENV'], 'a') as fh:
                print(f'{name}={value}', file=fh)

          set_output("DOCKER_ENABLED", data["tool"]["docker"]["enabled"])
          set_output("DOCKER_IMAGE_TEAM", data["tool"]["docker"]["team_name"])
          set_output("DOCKER_IMAGE_NAME", data["tool"]["docker"]["image_name"])

          set_output("JSON_ENABLED", data["tool"]["json"]["enabled"])
          set_output("JSON_PACKAGE", data["tool"]["json"]["package_json_path"])
          set_output("JSON_PACKAGE_LOCK", data["tool"]["json"]["package_lock_json_path"])

      #####################################################################################################################

      - name: Echo DOCKER & JSON config
        if: env.RELEASED_GENERATED == '1'
        run: |
          echo ${{env.DOCKER_ENABLED}}    
          echo ${{env.DOCKER_IMAGE_TEAM}}
          echo ${{env.DOCKER_IMAGE_NAME}}
          echo ${{env.JSON_ENABLED}}    
          echo ${{env.JSON_PACKAGE}}
          echo ${{env.JSON_PACKAGE_LOCK}}

      #####################################################################################################################

      - name: Write version to ${{ env.JSON_PACKAGE }} && ${{ env.JSON_PACKAGE_LOCK }}
        if: env.RELEASED_GENERATED == '1' &&  env.JSON_ENABLED == 'true'
        shell: python
        run: |
          import json
          import os
          f = open("${{ env.JSON_PACKAGE }}", "r") 
          data = json.load(f)
          data["version"] = "${{env.VERSION_ENV_CACHE}}"

          dump = json.dumps(data, indent = 4)

          with open("${{ env.JSON_PACKAGE }}", "w") as outfile:
              outfile.write(dump)

          f = open("${{ env.JSON_PACKAGE_LOCK }}", "r") 
          data = json.load(f)
          data["version"] = "${{env.VERSION_ENV_CACHE}}"

          dump = json.dumps(data, indent = 4)

          with open("${{ env.JSON_PACKAGE_LOCK }}", "w") as outfile:
              outfile.write(dump)

      #####################################################################################################################

      - name: Git add ${{ env.JSON_PACKAGE }} & ${{ env.JSON_PACKAGE_LOCK }}
        if: env.RELEASED_GENERATED == '1' &&  env.JSON_ENABLED == 'true'
        run: |
          git add ${{ env.JSON_PACKAGE }}
          git add ${{ env.JSON_PACKAGE_LOCK }}

      #####################################################################################################################

      - name: Run semantic release AUTO (follows semver)
        if: |
          steps.PR.outputs.pr_found == 'true' 
          && contains( fromJSON(steps.PR.outputs.pr).labels.*.name, 'release-auto')
          && !contains( fromJSON(steps.PR.outputs.pr).labels.*.name, 'release-patch')
          && !contains( fromJSON(steps.PR.outputs.pr).labels.*.name, 'release-minor')
          && !contains( fromJSON(steps.PR.outputs.pr).labels.*.name, 'release-major')
        run: |
          semantic-release --config semantic-release.toml version --changelog --vcs-release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      #####################################################################################################################

      - name: Run semantic release force PATCH
        if: |
          steps.PR.outputs.pr_found == 'true'
          && !contains( fromJSON(steps.PR.outputs.pr).labels.*.name, 'release-auto')
          && contains( fromJSON(steps.PR.outputs.pr).labels.*.name, 'release-patch')
          && !contains( fromJSON(steps.PR.outputs.pr).labels.*.name, 'release-minor')
          && !contains( fromJSON(steps.PR.outputs.pr).labels.*.name, 'release-major')
        run: |
          semantic-release --config semantic-release.toml version --changelog --patch --vcs-release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      #####################################################################################################################

      - name: Run semantic release force MINOR
        if: |
          steps.PR.outputs.pr_found == 'true'
          && !contains( fromJSON(steps.PR.outputs.pr).labels.*.name, 'release-auto')
          && !contains( fromJSON(steps.PR.outputs.pr).labels.*.name, 'release-patch')
          && contains( fromJSON(steps.PR.outputs.pr).labels.*.name, 'release-minor')
          && !contains( fromJSON(steps.PR.outputs.pr).labels.*.name, 'release-major')
        run: |
          semantic-release --config semantic-release.toml version --changelog --minor --vcs-release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      #####################################################################################################################

      - name: Run semantic release force MAJOR
        if: |
          steps.PR.outputs.pr_found == 'true'
          && !contains( fromJSON(steps.PR.outputs.pr).labels.*.name, 'release-auto')
          && !contains( fromJSON(steps.PR.outputs.pr).labels.*.name, 'release-patch')
          && !contains( fromJSON(steps.PR.outputs.pr).labels.*.name, 'release-minor')
          && contains( fromJSON(steps.PR.outputs.pr).labels.*.name, 'release-major')
        run: |
          semantic-release --config semantic-release.toml version --changelog --major --vcs-release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      #####################################################################################################################
      ## Next part is for building docker, and only run if env.RELEASED_GENERATED == '1'
      #####################################################################################################################

      - name: Build docker image with DOCKER_IMAGE_TEAM & DOCKER_IMAGE_NAME
        if: env.DOCKER_ENABLED == 'true' && env.RELEASED_GENERATED == '1'
        run: |
          docker build \
            -t ${{ secrets.AZURE_SERVER_URLS_CONTAINER_REGISTRY }}/${{env.DOCKER_IMAGE_TEAM}}/${{env.DOCKER_IMAGE_NAME}}:latest \
            -t ${{ secrets.AZURE_SERVER_URLS_CONTAINER_REGISTRY }}/${{env.DOCKER_IMAGE_TEAM}}/${{env.DOCKER_IMAGE_NAME}}:${{env.VERSION_ENV_CACHE}} .

      #####################################################################################################################

      - name: Source - login to ACR
        if: env.DOCKER_ENABLED == 'true' && env.RELEASED_GENERATED == '1'
        uses: docker/login-action@v3.0.0
        with:
          registry: ${{ secrets.AZURE_SERVER_URLS_CONTAINER_REGISTRY }}
          username: ${{ secrets.AZURE_CLINET_ID_CONTAINER_REGISTRY }}
          password: ${{ secrets.AZURE_CLIENT_SECRET_CONTAINER_REGISTRY }}

      #####################################################################################################################

      - name: Push docker image (latest tag and and new release)
        if: env.DOCKER_ENABLED == 'true' && env.RELEASED_GENERATED == '1'
        run: |
          docker push ${{ secrets.AZURE_SERVER_URLS_CONTAINER_REGISTRY }}/${{env.DOCKER_IMAGE_TEAM}}/${{env.DOCKER_IMAGE_NAME}}:latest
          docker push ${{ secrets.AZURE_SERVER_URLS_CONTAINER_REGISTRY }}/${{env.DOCKER_IMAGE_TEAM}}/${{env.DOCKER_IMAGE_NAME}}:${{env.VERSION_ENV_CACHE}}

  gitops:
    needs: release
    runs-on: ubuntu-latest

    steps:
      #####################################################################################################################

      - name: Checkout Source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: source

      #####################################################################################################################

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      #####################################################################################################################

      - name: Install python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install toml==0.10.2
          pip install ruamel.yaml==0.17.35
          pip install python-semantic-release==8.1.1

      #####################################################################################################################

      - name: Collect semantic release version number
        run: |
          echo "VERSION_ENV_CACHE=$(semantic-release --noop version)" >> $GITHUB_ENV

      #####################################################################################################################

      - name: Collect gitops config
        working-directory: ./source
        shell: python
        run: |
          import toml
          import os

          data = toml.load("semantic-release.toml")

          def set_output(name, value):
            with open(os.environ['GITHUB_ENV'], 'a') as fh:
                print(f'{name}={value}', file=fh)

          set_output("DOCKER_IMAGE_TEAM", data["tool"]["docker"]["team_name"])
          set_output("DOCKER_IMAGE_NAME", data["tool"]["docker"]["image_name"])

          set_output("GITOPS_ENABLED", data["tool"]["gitops"]["enabled"])
          set_output("GITOPS_REPO", data["tool"]["gitops"]["repo"])
          set_output("GITOPS_FILE", data["tool"]["gitops"]["file"])
          set_output("GITOPS_KIND", data["tool"]["gitops"]["kind"])
          set_output("GITOPS_IMAGE_PATH", data["tool"]["gitops"]["image_path"])

      #####################################################################################################################

      - name: Checkout gitops
        if: env.GITOPS_ENABLED == 'true' && env.GITOPS_REPO != '' && env.GITOPS_FILE != '' && env.GITOPS_KIND != '' && env.GITOPS_IMAGE_PATH != ''
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          repository: "${{ env.GITOPS_REPO }}"
          ssh-key: ${{ secrets.GITOPS_KEY }}
          path: gitops

      #####################################################################################################################

      - name: Collect gitops config
        if: env.GITOPS_ENABLED == 'true' && env.GITOPS_REPO != '' && env.GITOPS_FILE != '' && env.GITOPS_KIND != '' && env.GITOPS_IMAGE_PATH != ''
        working-directory: ./gitops
        shell: python
        run: |
          import ruamel.yaml

          yaml = ruamel.yaml.YAML()

          with open('${{ env.GITOPS_FILE }}', 'r') as file:
              code = list(yaml.load_all(file))
              
              for a in code:
                  if a["kind"] == "${{ env.GITOPS_KIND }}":
                      a${{ env.GITOPS_IMAGE_PATH }} = "${{ secrets.AZURE_SERVER_URLS_CONTAINER_REGISTRY }}/${{env.DOCKER_IMAGE_TEAM}}/${{env.DOCKER_IMAGE_NAME}}:${{env.VERSION_ENV_CACHE}}"  
                      with open('${{ env.GITOPS_FILE }}', 'w') as file:
                          yaml.dump_all(code, file)


      - name: Gitops - commit yaml
        if: env.GITOPS_ENABLED == 'true' && env.GITOPS_REPO != '' && env.GITOPS_FILE != '' && env.GITOPS_KIND != '' && env.GITOPS_IMAGE_PATH != ''
        working-directory: ./gitops
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add .
          git commit -m "Test updated ${{env.DOCKER_IMAGE_TEAM}}/${{env.DOCKER_IMAGE_NAME}}:${{env.VERSION_ENV_CACHE}}"  
          git push