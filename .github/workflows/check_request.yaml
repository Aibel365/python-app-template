name: Lint/Check Pull Request

on:
  pull_request:
    types: [opened, synchronize, edited, labeled]
    branches:
      - main

jobs:
  lintCheck:
    name: Python Check Pull Request
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]

    steps:
      #####################################################################################################################

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      #####################################################################################################################

      - name: Checkout git
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      #####################################################################################################################

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install toml==0.10.2

      #####################################################################################################################

      - name: Throw if pull request title is missing fix/feat/chore
        if: |
          !contains(github.event.pull_request.title, 'fix: ') 
          && !contains(github.event.pull_request.title, 'fix!: ') 
          && !contains(github.event.pull_request.title, 'feat: ') 
          && !contains(github.event.pull_request.title, 'feat!: ') 
          && !contains(github.event.pull_request.title, 'chore: ')
        run: |
          echo "You need to start PR title with fix: /feat: /fix!: /feat!: /chore: "
          Not approved && exit 1

      #####################################################################################################################

      - name: Throw is release label is missing
        if: |
          !contains(github.event.pull_request.labels.*.name, 'release-auto') 
          && !contains(github.event.pull_request.labels.*.name, 'release-patch') 
          && !contains(github.event.pull_request.labels.*.name, 'release-minor') 
          && !contains(github.event.pull_request.labels.*.name, 'release-major')
          && !contains(github.event.pull_request.labels.*.name, 'release-skip')
        run: |
          echo "You need to set a release tag, release-xyz  (auto, patch, minor, major or skip)"
          Not approved && exit 1

      #####################################################################################################################

      - name: Collect docker image team and name
        shell: python
        run: |
          import toml
          import os

          data = toml.load("semantic-release.toml")

          def set_output(name, value):
            with open(os.environ['GITHUB_ENV'], 'a') as fh:
                print(f'{name}={value}', file=fh)

          set_output("DOCKER_ENABLED", data["tool"]["docker"]["enabled"])
          set_output("DOCKER_IMAGE_TEAM", data["tool"]["docker"]["team_name"])
          set_output("DOCKER_IMAGE_NAME", data["tool"]["docker"]["image_name"])

          set_output("JSON_ENABLED", data["tool"]["json"]["enabled"])
          set_output("JSON_PACKAGE", data["tool"]["json"]["package_json_path"])
          set_output("JSON_PACKAGE_LOCK", data["tool"]["json"]["package_lock_json_path"])

      #####################################################################################################################

      - name: Echo DOCKER_IMAGE_TEAM & DOCKER_IMAGE_NAME - info only
        run: |
          echo ${{env.DOCKER_ENABLED}}    
          echo ${{env.DOCKER_IMAGE_TEAM}}
          echo ${{env.DOCKER_IMAGE_NAME}}
          echo ${{env.JSON_ENABLED}}    
          echo ${{env.JSON_PACKAGE}}
          echo ${{env.JSON_PACKAGE_LOCK}}
       
      #####################################################################################################################

      - name: Check if docker image will manage to build with DOCKER_IMAGE_TEAM & DOCKER_IMAGE_NAME
        if: |
          env.DOCKER_ENABLED == 'true' && (
          contains(github.event.pull_request.labels.*.name, 'release-auto') 
          || contains(github.event.pull_request.labels.*.name, 'release-patch') 
          || contains(github.event.pull_request.labels.*.name, 'release-minor') 
          || contains(github.event.pull_request.labels.*.name, 'release-major'))
        run: |
          docker build -t ${{ secrets.CONTAINER_REGISTRY_ACR_URL }}/${{env.DOCKER_IMAGE_TEAM}}/${{env.DOCKER_IMAGE_NAME}}:latest .

      #####################################################################################################################

      - name: Check if acr login is setup correctly
        if: |
          env.DOCKER_ENABLED == 'true' && (
          contains(github.event.pull_request.labels.*.name, 'release-auto') 
          || contains(github.event.pull_request.labels.*.name, 'release-patch') 
          || contains(github.event.pull_request.labels.*.name, 'release-minor') 
          || contains(github.event.pull_request.labels.*.name, 'release-major'))
        uses: docker/login-action@v3.0.0
        with:
          registry: ${{ secrets.CONTAINER_REGISTRY_ACR_URL }}
          username: ${{ secrets.CONTAINER_REGISTRY_ACR_USERNAME }}
          password: ${{ secrets.CONTAINER_REGISTRY_ACR_PASSWORD }}

      #####################################################################################################################
      - name: Check if we can write version to ${{ env.JSON_PACKAGE }} && ${{ env.JSON_PACKAGE_LOCK }}
        if: env.JSON_ENABLED == 'true'
        shell: python
        run: |
          import json
          import os
          f = open("${{ env.JSON_PACKAGE }}", "r") 
          data = json.load(f)
          data["version"] = "${{env.VERSION_ENV_CACHE}}"

          dump = json.dumps(data, indent = 4)

          with open("${{ env.JSON_PACKAGE }}", "w") as outfile:
              outfile.write(dump)

          f = open("${{ env.JSON_PACKAGE_LOCK }}", "r") 
          data = json.load(f)
          data["version"] = "${{env.VERSION_ENV_CACHE}}"

          dump = json.dumps(data, indent = 4)

          with open("${{ env.JSON_PACKAGE_LOCK }}", "w") as outfile:
              outfile.write(dump)

  gitopsCheck:
    needs: lintCheck
    runs-on: ubuntu-latest

    steps:
      #####################################################################################################################

      - name: Checkout Source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: source

      #####################################################################################################################

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      #####################################################################################################################

      - name: Install python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install toml==0.10.2
          pip install ruamel.yaml==0.17.35
          pip install python-semantic-release==8.1.1

      #####################################################################################################################

      - name: Collect semantic release version number
        working-directory: ./source
        run: |
          echo "VERSION_ENV_CACHE=$(semantic-release --noop version)" >> $GITHUB_ENV

      #####################################################################################################################

      - name: No version found, overriding to 0.0.0
        if: env.VERSION_ENV_CACHE == ''
        run: |
          echo "VERSION_ENV_CACHE=0.0.0" >> $GITHUB_ENV

      #####################################################################################################################

      - name: Collect gitops config
        working-directory: ./source
        shell: python
        run: |
          import toml
          import os

          data = toml.load("semantic-release.toml")

          def set_output(name, value):
            with open(os.environ['GITHUB_ENV'], 'a') as fh:
                print(f'{name}={value}', file=fh)

          set_output("DOCKER_IMAGE_TEAM", data["tool"]["docker"]["team_name"])
          set_output("DOCKER_IMAGE_NAME", data["tool"]["docker"]["image_name"])

          set_output("GITOPS_ENABLED", data["tool"]["gitops"]["enabled"])
          set_output("GITOPS_REPO", data["tool"]["gitops"]["repo"])
          set_output("GITOPS_FILE", data["tool"]["gitops"]["file"])
          set_output("GITOPS_KIND", data["tool"]["gitops"]["kind"])
          set_output("GITOPS_IMAGE_PATH", data["tool"]["gitops"]["image_path"])

      #####################################################################################################################

      - name: Echo DOCKER_IMAGE_TEAM & DOCKER_IMAGE_NAME - info only
        run: |
          echo ${{env.DOCKER_ENABLED}}    
          echo ${{env.DOCKER_IMAGE_TEAM}}
          echo ${{env.DOCKER_IMAGE_NAME}}
          echo ${{env.JSON_ENABLED}}    
          echo ${{env.JSON_PACKAGE}}
          echo ${{env.JSON_PACKAGE_LOCK}}
          echo ${{env.VERSION_ENV_CACHE}}

      #####################################################################################################################

      - name: Checkout gitops
        if: env.GITOPS_ENABLED == 'true' && env.GITOPS_REPO != '' && env.GITOPS_FILE != '' && env.GITOPS_KIND != '' && env.GITOPS_IMAGE_PATH != ''
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          repository: "${{ env.GITOPS_REPO }}"
          ssh-key: ${{ secrets.GITOPS_KEY }}
          path: gitops

      #####################################################################################################################

      - name: Collect gitops config
        if: env.GITOPS_ENABLED == 'true' && env.GITOPS_REPO != '' && env.GITOPS_FILE != '' && env.GITOPS_KIND != '' && env.GITOPS_IMAGE_PATH != ''
        working-directory: ./gitops
        shell: python
        run: |
          import ruamel.yaml

          yaml = ruamel.yaml.YAML()

          with open('${{ env.GITOPS_FILE }}', 'r') as file:
              code = list(yaml.load_all(file))
              
              for a in code:
                  if a["kind"] == "${{ env.GITOPS_KIND }}":
                      a${{ env.GITOPS_IMAGE_PATH }} = "${{ secrets.CONTAINER_REGISTRY_ACR_URL }}/${{env.DOCKER_IMAGE_TEAM}}/${{env.DOCKER_IMAGE_NAME}}:${{env.VERSION_ENV_CACHE}}"  
                      with open('${{ env.GITOPS_FILE }}', 'w') as file:
                          yaml.dump_all(code, file)
